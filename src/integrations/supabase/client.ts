// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://khmpmlnthalcxepzkadn.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtobXBtbG50aGFsY3hlcHprYWRuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5MDQwNzksImV4cCI6MjA2NTQ4MDA3OX0.mnCAjdPcdJmwnmUjC2bJ2sPTrUMWSX9oLiFNMLsAla8";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: (url, options = {}) => {
      return fetch(url, {
        ...options,
        // Add timeout and retry logic
        signal: AbortSignal.timeout(30000), // 30 second timeout
      }).catch(error => {
        console.error('Network request failed:', error);
        // Re-throw the error to maintain existing error handling
        throw error;
      });
    },
  },
});

// Helper function for retrying failed requests
export const withRetry = async <T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000
): Promise<T> => {
  let lastError: Error;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error as Error;
      
      // Don't retry on certain types of errors
      if (error instanceof Error) {
        // Don't retry on authentication errors or permission errors
        if (error.message.includes('JWT') || 
            error.message.includes('permission') || 
            error.message.includes('unauthorized') ||
            error.message.includes('forbidden')) {
          throw error;
        }
      }
      
      if (attempt === maxRetries) {
        console.error(`Operation failed after ${maxRetries} attempts:`, lastError);
        throw lastError;
      }
      
      console.warn(`Attempt ${attempt} failed, retrying in ${delay}ms:`, error);
      await new Promise(resolve => setTimeout(resolve, delay * attempt));
    }
  }
  
  throw lastError!;
};